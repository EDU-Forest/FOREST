pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS') // set timeout 1 hour
    }
    environment {
        DOCKER = 'sudo docker'
        TIME_ZONE = 'Asia/Seoul'
        PROFILE = 'local'
        REGION = 'ap-northeast-2'
    }
    stages{

        stage('Clone Repository') {
            steps {
                checkout scm
                echo 'Checkout Scm'
            }
        }

        stage('env setting') {
            steps{
                sh 'cp /var/jenkins_home/env/workbook/application-prod.yml /var/jenkins_home/workspace/prod-back-workbook/forest-back/forest-workbook/src/main/resources'
                sh 'cp /var/jenkins_home/env/workbook/forest-384908-251e8b2406b6.json /var/jenkins_home/workspace/prod-back-workbook/forest-back/forest-workbook'
            }            
        }
        
        stage('dockerizing project by dockerfile') {
            steps {
                dir('forest-back/forest-workbook') {
                    sh '''
                ls -al
                chmod +x ./gradlew
                ./gradlew build
        		 docker build -t ${IMAGE_NAME_WORKBOOK}:$BUILD_NUMBER .
        		 docker tag ${IMAGE_NAME_WORKBOOK}:$BUILD_NUMBER ${IMAGE_NAME_WORKBOOK}:latest

        		 '''
                }                
            }
            post {
                success {
                    echo 'success dockerizing project'
                }
                failure {
                    error 'fail dockerizing project' // exit pipeline
                }
            }
        }
        stage('upload aws ECR') {
            steps {
                script{
                    // cleanup current user docker credentials
                    sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'
                    
                   
                    docker.withRegistry("https://${ECR_PATH_WORKBOOK}", "ecr:${REGION}:${AWS_CREDENTIAL_NAME}") {
                      docker.image("${IMAGE_NAME_WORKBOOK}:${BUILD_NUMBER}").push()
                      docker.image("${IMAGE_NAME_WORKBOOK}:latest").push()

                      sleep 10
                    }

                }
            }
            post {
                success {
                    echo 'success upload image'
                    sh 'docker rmi ${IMAGE_NAME_WORKBOOK}:${BUILD_NUMBER}'
                    sh 'docker rmi ${IMAGE_NAME_WORKBOOK}:latest'
                }
                failure {
                    error 'fail upload image' // exit pipeline
                    sh 'docker rmi ${IMAGE_NAME_WORKBOOK}:${BUILD_NUMBER}'
                    sh 'docker rmi ${IMAGE_NAME_WORKBOOK}:latest'
                }
            }
        }

        stage('Manifest Update') {
            steps {
                git credentialsId: '${GIT_CREDENTIALS_ID}',
                    url: '${GIT_URL}',
                    branch: 'main'
                
                
                dir('back') {
                    sh """
                    ls -al                    

                    cat ${EKS_DEPLOY_WORKBOOK_YML} | grep image

                    sed -i 's|image: .*|image: "${IMAGE_NAME_WORKBOOK}:${currentBuild.number}"|' ${EKS_DEPLOY_WORKBOOK_YML}

                    cat ${EKS_DEPLOY_WORKBOOK_YML} | grep image
                    
                    git status
                    git add ${EKS_DEPLOY_WORKBOOK_YML}
                    git commit -m '[UPDATE] forest-back-workbook ${currentBuild.number} image versioning'
                    git push origin main
                    """
                }
            }
        }
    }
}
