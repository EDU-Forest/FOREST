pipeline {
    agent any
    environment {
        DOCKER = 'sudo docker'
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
                echo 'Checkout Scm'
            }
        }

        stage('env setting') {
            parallel {
                stage('insert-keystore-auth') {
                    when {
                        anyOf {
                            changeset "forest-back/forest-auth/**/*"
                        }
                    }
                    steps {
                        sh 'cp /var/jenkins_home/env/keystore.p12 /var/jenkins_home/workspace/dev-back-pipeline/forest-back/forest-auth/src/main/resources'
                        echo 'Insert keystore...'
                        
                        dir('forest-back/forest-auth'){
                            sh 'ls -al'
                            sh 'chmod +x ./gradlew'
                            sh './gradlew build'
                            sh 'docker build -t ${FOREST_AUTH_IMAGE} .'
                        }
                        echo 'Build image...'

                        script {
                            try {
                                dir('forest-back/forest-auth'){                                                                        
                                    sh 'docker-compose down'    
                                }                                
                            } catch (e) {
                                echo 'fail to stop and remove container'
                            }
                        }

                        script {
                            try {
                                dir('forest-back/forest-auth') {                                    
                                    sh 'docker-compose up -d'
                                }
                                echo 'run new image'
                            } catch(e) {
                                echo 'fail to docker-compose up'
                            }
                        }     
                    }                    
                }   

                stage('insert-keystore-workbook') {
                    when {
                        anyOf {
                            changeset "forest-back/forest-workbook/**/*"
                        }
                    }
                    steps {
                        sh 'cp /var/jenkins_home/env/keystore.p12 /var/jenkins_home/workspace/dev-back-pipeline/forest-back/forest-workbook/src/main/resources'
                        echo 'Insert keystore...'
                        
                        dir('forest-back/forest-workbook'){
                            sh 'ls -al'
                            sh 'chmod +x ./gradlew'
                            sh './gradlew build'
                            sh 'docker build -t ${FOREST_WORKBOOK_IMAGE} .'
                        }
                        echo 'Build image...'

                        script {
                            try {
                                dir('forest-back/forest-workbook'){                                                                        
                                    sh 'docker-compose down'    
                                }                                
                            } catch (e) {
                                echo 'fail to stop and remove container'
                            }
                        }

                        script {
                            try {
                                dir('forest-back/forest-workbook') {                                    
                                    sh 'docker-compose up -d'
                                }
                                echo 'run new image'
                            } catch(e) {
                                echo 'fail to docker-compose up'
                            }
                        }     
                    }                    
                }

                stage('insert-keystore-study') {
                    when {
                        anyOf {
                            changeset "forest-back/forest-study/**/*"
                        }
                    }
                    steps {
                        sh 'cp /var/jenkins_home/env/keystore.p12 /var/jenkins_home/workspace/dev-back-pipeline/forest-back/forest-study/src/main/resources'
                        echo 'Insert keystore...'
                        
                        dir('forest-back/forest-study'){
                            sh 'ls -al'
                            sh 'chmod +x ./gradlew'
                            sh './gradlew build'
                            sh 'docker build -t ${FOREST_STUDY_IMAGE} .'
                        }
                        echo 'Build image...'

                        script {
                            try {
                                dir('forest-back/forest-study'){                                                                        
                                    sh 'docker-compose down'    
                                }                                
                            } catch (e) {
                                echo 'fail to stop and remove container'
                            }
                        }

                        script {
                            try {
                                dir('forest-back/forest-study') {                                    
                                    sh 'docker-compose up -d'
                                }
                                echo 'run new image'
                            } catch(e) {
                                echo 'fail to docker-compose up'
                            }
                        }     
                    }                    
                }                                       
            }            
        }

        stage('send to mattermost') {
            steps {
                echo 'send to mattermost'
                mattermostSend(color: "#2A42EE", icon: "https://jenkins.io/images/logos/jenkins/jenkins.png", message: "Build SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Link to build>)", channel: 'B105_JENKINS', endpoint: 'https://meeting.ssafy.com/hooks/ixfxtzo9qpbh3m5gc854ps7nca')
            }
        }
    }
}
