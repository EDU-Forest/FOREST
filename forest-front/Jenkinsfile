pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS') // set timeout 1 hour
    }
    environment {
        DOCKER = 'sudo docker'

        TIME_ZONE = 'Asia/Seoul'
        PROFILE = 'local'
        
        REPOSITORY_CREDENTIAL_ID = 'adcdm77@naver.com'
        REPOSITORY_URL = 'git@lab.ssafy.com:s08-final/S08P31B105.git'
        TARGET_BRANCH = 'production-front'
        
        CONTAINER_NAME = 'prod-front-container'
        
        AWS_CREDENTIAL_NAME = 'choi1087'
        ECR_PATH = '240177199888.dkr.ecr.ap-northeast-2.amazonaws.com/forest-front'
        IMAGE_NAME = '240177199888.dkr.ecr.ap-northeast-2.amazonaws.com/forest-front'
        REGION = 'ap-northeast-2'
    }
    stages{

        stage('Clone Repository') {
            steps {
                checkout scm
                echo 'Checkout Scm'
            }
        }

        stage('env setting') {
            steps{
                sh 'cp /var/jenkins_home/env/.env /var/jenkins_home/workspace/dev-front-pipeline/forest-front'                
            }            
        }
        
        stage('dockerizing project by dockerfile') {
            steps {
                dir('forest-front') {
                    sh '''
                ls -al
                npm -v
                node -v
        		 docker build -t $IMAGE_NAME:$BUILD_NUMBER .
        		 docker tag $IMAGE_NAME:$BUILD_NUMBER $IMAGE_NAME:latest

        		 '''
                }                
            }
            post {
                success {
                    echo 'success dockerizing project'
                }
                failure {
                    error 'fail dockerizing project' // exit pipeline
                }
            }
        }
        stage('upload aws ECR') {
            steps {
                script{
                    // cleanup current user docker credentials
                    sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'
                    
                   
                    docker.withRegistry("https://${ECR_PATH}", "ecr:${REGION}:${AWS_CREDENTIAL_NAME}") {
                      docker.image("${IMAGE_NAME}:${BUILD_NUMBER}").push()
                      docker.image("${IMAGE_NAME}:latest").push()

                      sleep 10
                    }

                }
            }
            post {
                success {
                    echo 'success upload image'
                    sh 'docker rmi ${IMAGE_NAME}:${BUILD_NUMBER}'
                    sh 'docker rmi ${IMAGE_NAME}:latest'
                }
                failure {
                    error 'fail upload image' // exit pipeline
                    sh 'docker rmi ${IMAGE_NAME}:${BUILD_NUMBER}'
                    sh 'docker rmi ${IMAGE_NAME}:latest'
                }
            }
        }
    }
}
