def previousBuildNumber = currentBuild.previousBuild?.number

pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS') // set timeout 1 hour
    }
    environment {
        DOCKER = 'sudo docker'
        TIME_ZONE = 'Asia/Seoul'
        PROFILE = 'local'        
        REGION = 'ap-northeast-2'
    }
    stages{

        stage('Clone Repository') {
            steps {
                checkout scm
                echo 'Checkout Scm'
            }
        }

        stage('env setting') {
            steps{
                sh 'cp /var/jenkins_home/env/.env /var/jenkins_home/workspace/prod-front/forest-front'                
            }            
        }
        
        stage('dockerizing project by dockerfile') {
            steps {
                dir('forest-front') {
                    sh '''
                ls -al
                npm -v
                node -v
                 docker build -t ${IMAGE_NAME_FRONT}:$BUILD_NUMBER .
                 docker tag ${IMAGE_NAME_FRONT}:$BUILD_NUMBER ${IMAGE_NAME_FRONT}:latest

                 '''
                }                
            }
            post {
                success {
                    echo 'success dockerizing project'
                }
                failure {
                    error 'fail dockerizing project' // exit pipeline
                }
            }
        }
        stage('upload aws ECR') {
            steps {
                script{
                    // cleanup current user docker credentials
                    sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'
                    
                    sh 'echo ${ECR_PATH_FRONT}'
                    sh 'echo ${REGION}'
                    sh 'echo ${AWS_CREDENTIAL_NAME}'
                   
                    docker.withRegistry("https://${ECR_PATH_FRONT}", "ecr:${REGION}:${AWS_CREDENTIAL_NAME}") {
                      docker.image("${IMAGE_NAME_FRONT}:${BUILD_NUMBER}").push()
                      docker.image("${IMAGE_NAME_FRONT}:latest").push()

                      sleep 10
                    }

                }
            }
            post {
                success {
                    echo 'success upload image'
                    sh 'docker rmi ${IMAGE_NAME_FRONT}:${BUILD_NUMBER}'
                    sh 'docker rmi ${IMAGE_NAME_FRONT}:latest'
                }
                failure {
                    error 'fail upload image' // exit pipeline
                    sh 'docker rmi ${IMAGE_NAME_FRONT}:${BUILD_NUMBER}'
                    sh 'docker rmi ${IMAGE_NAME_FRONT}:latest'
                }
            }
        }

        stage('Manifest Update') {
            steps {
                git credentialsId: '${GIT_CREDENTIALS_ID}',
                    url: '${GIT_URL}',
                    branch: 'main'
                
                
                dir('front') {
                    sh """
                    ls -al                    

                    cat ${EKS_DEPLOY_REACT_YML} | grep image

                    sed -i 's|image: .*|image: "${IMAGE_NAME_FRONT}:${currentBuild.number}"|' ${EKS_DEPLOY_REACT_YML}

                    cat ${EKS_DEPLOY_REACT_YML} | grep image
                    
                    git status
                    git add ${EKS_DEPLOY_REACT_YML}
                    git commit -m '[UPDATE] forest-front ${currentBuild.number} image versioning'
                    git push origin main
                    """
                }
            }
        }
    }
}